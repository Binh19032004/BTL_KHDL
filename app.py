import requests
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import plotly.graph_objects as go
import plotly.express as px
import streamlit as st
# from streamlit_option_menu import option_menu  <- ƒê√£ x√≥a
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from scipy.stats import zscore
import warnings
warnings.filterwarnings('ignore')



st.set_page_config(page_title="BTC Analysis Pro", page_icon="üìà", layout="wide", initial_sidebar_state="collapsed") # Thu g·ªçn sidebar (m·∫∑c d√π ta kh√¥ng d√πng)

st.markdown("""
<style>
    .main { padding-top: 1.5rem; }
    h1 { color: #1f77b4; margin-bottom: 0.5rem; }
    .insight { background: rgba(31,119,180,0.15); padding: 15px; border-left: 5px solid #1f77b4; border-radius: 6px; margin-bottom: 1.5rem; font-size: 14px; line-height: 1.6; }
</style>
""", unsafe_allow_html=True)

# ==============================================================================
# C√ÅC H√ÄM L·∫§Y D·ªÆ LI·ªÜU, X·ª¨ L√ù V√Ä V·∫º BI·ªÇU ƒê·ªí
# ==============================================================================

@st.cache_data
def fetch_binance(sym='BTCUSDT', intv='1h', lim=500):
    url = 'https://api.binance.com/api/v3/klines'
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        r = requests.get(url, params={'symbol': sym, 'interval': intv, 'limit': lim}, 
                        timeout=15, headers=headers)
        r.raise_for_status()
        cols = ['t', 'o', 'h', 'l', 'c', 'v', 'ct', 'qav', 'nt', 'tbbav', 'tbqav', 'ig']
        df = pd.DataFrame(r.json(), columns=cols)
        return df
    except Exception as e:
        st.error(f"‚ùå L·ªói API Binance: {e}")
        return None

@st.cache_data
def fetch_news(key='fb371b39780a94f8a3500184fcdd2aa0326ebc66'):
    url = 'https://cryptopanic.com/api/v1/posts/'
    try:
        r = requests.get(url, params={'auth_token': key, 'kind': 'news', 'filter': 'trending', 'limit': 20}, timeout=15)
        r.raise_for_status()
        data = r.json()
        news = []
        if 'results' in data:
            for item in data['results']:
                title = item.get('title', '').lower()
                if any(word in title for word in ['bitcoin', 'btc', 'crypto', 'btc', 'ethereum']):
                    news.append({
                        'ti√™u_ƒë·ªÅ': item.get('title', 'N/A'),
                        'lo·∫°i': item.get('kind', 'news'),
                        'ngu·ªìn': item.get('source', {}).get('title', 'Unknown') if item.get('source') else 'Unknown'
                    })
        return news[:20]
    except Exception as e:
        st.warning(f"‚ö†Ô∏è L·ªói CryptoPanic: {e}")
        return []

@st.cache_data
def clean_binance(df):
    d = df.copy()
    
    num_cols = ['o', 'h', 'l', 'c', 'v', 'qav']
    for col in num_cols:
        d[col] = pd.to_numeric(d[col], errors='coerce')
    
    d['t'] = pd.to_datetime(d['t'], unit='ms')
    d = d.dropna(subset=['c', 'h', 'l', 'o', 'v'])
    d = d[d['v'] > 0].reset_index(drop=True)
    
    d['ret'] = d['c'].pct_change() * 100
    d['rng'] = d['h'] - d['l']
    d['bod'] = abs(d['c'] - d['o'])
    d['vol7'] = d['c'].rolling(7).std()
    d['vol14'] = d['c'].rolling(14).std()
    d['ma7'] = d['c'].rolling(7).mean()
    d['ma21'] = d['c'].rolling(21).mean()
    d['ma50'] = d['c'].rolling(50).mean()
    d['rsi'] = calc_rsi(d['c'])
    d['macd'], d['signal'] = calc_macd(d['c'])
    d['bb_up'], d['bb_down'] = calc_bb(d['c'])
    
    d['dir'] = d['ret'].apply(lambda x: 'TƒÇNG' if x > 0 else ('GI·∫¢M' if x < 0 else 'NGANG'))
    d['wd'] = d['t'].dt.day_name()
    d['wd_vn'] = d['t'].dt.day_name().map({
        'Monday': 'Th·ª© Hai', 'Tuesday': 'Th·ª© Ba', 'Wednesday': 'Th·ª© T∆∞',
        'Thursday': 'Th·ª© NƒÉm', 'Friday': 'Th·ª© S√°u', 'Saturday': 'Th·ª© B·∫£y', 'Sunday': 'Ch·ªß Nh·∫≠t'
    })
    d['hr'] = d['t'].dt.hour
    d['dy'] = d['t'].dt.date
    d['wk'] = d['t'].dt.isocalendar().week
    d['vol_norm'] = (d['v'] - d['v'].mean()) / d['v'].std()
    
    return d.reset_index(drop=True)

def calc_rsi(pr, p=14):
    d = pr.diff()
    g = d.where(d > 0, 0)
    l = -d.where(d < 0, 0)
    rs = g.rolling(p).mean() / l.rolling(p).mean()
    return 100 - (100 / (1 + rs))

def calc_macd(pr, f=12, s=26, sig=9):
    m = pr.ewm(span=f).mean() - pr.ewm(span=s).mean()
    s_line = m.ewm(span=sig).mean()
    return m, s_line

def calc_bb(pr, p=20, dev=2):
    ma = pr.rolling(p).mean()
    std = pr.rolling(p).std()
    return ma + (std * dev), ma - (std * dev)

# --- (C√ÅC H√ÄM CHART ƒê√É ƒê∆Ø·ª¢C ƒê·ªîI T√äN TITLE) ---
def chart_hist(d):
    fig = go.Figure()
    ret = d['ret'].dropna()
    fig.add_trace(go.Histogram(x=ret, nbinsx=40, marker=dict(color='rgba(31,119,180,0.7)', line=dict(color='rgba(31,119,180,1)', width=1)), hovertemplate='L·ª£i su·∫•t: %{x:.2f}%<br>T·∫ßn su·∫•t: %{y}<extra></extra>'))
    fig.add_vline(x=ret.mean(), line_dash="dash", line_color="red", annotation_text=f"Trung b√¨nh: {ret.mean():.3f}%", annotation_position="top right")
    # ƒê√É THAY ƒê·ªîI TITLE
    fig.update_layout(title='Ph√¢n T√≠ch T·∫ßn Su·∫•t L·ª£i Nhu·∫≠n (Histogram)', xaxis_title='L·ª£i Su·∫•t (%)', yaxis_title='T·∫ßn Su·∫•t', template='plotly_white', height=500, hovermode='x unified')
    return fig

def chart_box(d):
    fig = go.Figure()
    for dr in ['GI·∫¢M', 'NGANG', 'TƒÇNG']:
        sub = d[d['dir'] == dr]['rng']
        if len(sub) > 0:
            fig.add_trace(go.Box(y=sub, name=dr, boxmean='sd', marker_color={'TƒÇNG': '#00cc96', 'GI·∫¢M': '#ef553b', 'NGANG': '#636efb'}[dr]))
    # ƒê√É THAY ƒê·ªîI TITLE
    fig.update_layout(title='Ph·∫°m Vi Bi·∫øn ƒê·ªông Gi√° (Boxplot)', yaxis_title='Bi√™n ƒê·ªô ($)', template='plotly_white', height=500)
    return fig

def chart_violin(d):
    fig = go.Figure()
    wd_ord = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
    for wd in wd_ord:
        sub = d[d['wd'] == wd]['vol7'].fillna(d['vol7'].mean())
        if len(sub) > 0:
            wd_vn = d[d['wd'] == wd]['wd_vn'].iloc[0]
            fig.add_trace(go.Violin(y=sub, name=wd_vn, box_visible=True, meanline_visible=True))
    # ƒê√É THAY ƒê·ªîI TITLE
    fig.update_layout(title='Ph√¢n Ph·ªëi Bi·∫øn ƒê·ªông (Violin) theo Ng√†y', yaxis_title='ƒê·ªô Bi·∫øn ƒê·ªông 7 Ng√†y ($)', template='plotly_white', height=500)
    return fig

def chart_line(d):
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=d['t'], y=d['c'], mode='lines', name='Gi√° ƒê√≥ng C·ª≠a', line=dict(color='#1f77b4', width=2), hovertemplate='%{x}<br>$%{y:.2f}<extra></extra>'))
    fig.add_trace(go.Scatter(x=d['t'], y=d['ma7'], mode='lines', name='MA7 (Xu H∆∞·ªõng Ng·∫Øn)', line=dict(color='#ff7f0e', width=1, dash='dash')))
    fig.add_trace(go.Scatter(x=d['t'], y=d['ma21'], mode='lines', name='MA21 (Xu H∆∞·ªõng Trung)', line=dict(color='#d62728', width=1, dash='dot')))
    # ƒê√É THAY ƒê·ªîI TITLE
    fig.update_layout(title='Ph√¢n T√≠ch Xu H∆∞·ªõng Gi√° (MA7, MA21)', xaxis_title='Th·ªùi Gian', yaxis_title='Gi√° ($)', template='plotly_white', height=500, hovermode='x unified')
    return fig

def chart_area(d):
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=d['t'], y=d['c'], fill='tozeroy', name='Gi√°', line=dict(color='#1f77b4'), hovertemplate='%{x}<br>$%{y:.2f}<extra></extra>'))
    # ƒê√É THAY ƒê·ªîI TITLE
    fig.update_layout(title='Bi·ªÉu ƒê·ªì V√πng: Gi√° ƒê√≥ng C·ª≠a Theo Th·ªùi Gian', xaxis_title='Th·ªùi Gian', yaxis_title='Gi√° ($)', template='plotly_white', height=500, hovermode='x unified')
    return fig

def chart_scatter(d):
    clean_d = d.dropna(subset=['ret', 'vol7'])
    x = np.array(range(len(clean_d))).reshape(-1, 1)
    y = clean_d['ret'].values
    model = LinearRegression().fit(x, y)
    y_pred = model.predict(x)
    
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=clean_d['t'], y=clean_d['ret'], mode='markers', name='L·ª£i Su·∫•t', marker=dict(size=6, color='#1f77b4', opacity=0.6), hovertemplate='%{x}<br>L·ª£i Su·∫•t: %{y:.2f}%<extra></extra>'))
    fig.add_trace(go.Scatter(x=clean_d['t'], y=y_pred, mode='lines', name='Xu H∆∞·ªõng', line=dict(color='red', width=2)))
    # ƒê√É THAY ƒê·ªîI TITLE
    fig.update_layout(title='H·ªìi Quy Tuy·∫øn T√≠nh: Xu H∆∞·ªõng L·ª£i Su·∫•t', xaxis_title='Th·ªùi Gian', yaxis_title='L·ª£i Su·∫•t (%)', template='plotly_white', height=500)
    return fig

def chart_heatmap(d):
    cols = ['c', 'o', 'h', 'l', 'v', 'ret', 'rng', 'vol7', 'rsi']
    corr = d[cols].corr()
    fig = go.Figure(data=go.Heatmap(z=corr.values, x=corr.columns, y=corr.columns, colorscale='RdBu', zmid=0, hovertemplate='%{x} - %{y}: %{z:.2f}<extra></extra>'))
    # ƒê√É THAY ƒê·ªîI TITLE
    fig.update_layout(title='B·∫£n ƒê·ªì Nhi·ªát: T∆∞∆°ng Quan D·ªØ Li·ªáu', height=600, width=700)
    return fig

def chart_treemap(d):
    d_agg = d.groupby('dy').agg({'ret': 'sum', 'c': 'last', 'v': 'sum'}).reset_index()
    d_agg.columns = ['Ng√†y', 'L·ª£i Su·∫•t T·ªïng', 'Gi√° Cu·ªëi', 'Kh·ªëi L∆∞·ª£ng']
    d_agg['Abs Return'] = abs(d_agg['L·ª£i Su·∫•t T·ªïng'])
    d_agg['Ng√†y Str'] = d_agg['Ng√†y'].astype(str)
    d_agg['parent'] = ''
    
    if len(d_agg) == 0:
        st.warning("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu Treemap")
        return None
    
    fig = go.Figure(go.Treemap(
        labels=d_agg['Ng√†y Str'],
        parents=d_agg['parent'],
        values=d_agg['Abs Return'],
        marker=dict(
            colors=d_agg['L·ª£i Su·∫•t T·ªïng'],
            colorscale='RdYlGn',
            cmid=0,
            line=dict(color='white', width=2)
        ),
        hovertemplate='<b>%{label}</b><br>L·ª£i Su·∫•t: %{customdata[0]:.3f}%<br>Gi√°: $%{customdata[1]:.2f}<br>Kh·ªëi L∆∞·ª£ng: %{customdata[2]:.0f}<extra></extra>',
        customdata=d_agg[['L·ª£i Su·∫•t T·ªïng', 'Gi√° Cu·ªëi', 'Kh·ªëi L∆∞·ª£ng']].values
    ))
    # ƒê√É THAY ƒê·ªîI TITLE
    fig.update_layout(title='Treemap: L·ª£i Su·∫•t R√≤ng H√†ng Ng√†y', height=600)
    return fig

def chart_sunburst(d):
    d_agg = d.groupby('dy').agg({'ret': 'sum', 'v': 'sum', 'hr': 'first'}).reset_index()
    d_agg.columns = ['Ng√†y', 'L·ª£i Su·∫•t', 'Kh·ªëi L∆∞·ª£ng', 'Gi·ªù']
    d_agg['Ng√†y Str'] = d_agg['Ng√†y'].astype(str)
    
    if len(d_agg) == 0:
        st.warning("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu Sunburst")
        return None
    
    labels = ['T·ªïng C·ªông'] + d_agg['Ng√†y Str'].tolist()
    parents = [''] + ['T·ªïng C·ªông'] * len(d_agg)
    values = [d_agg['L·ª£i Su·∫•t'].sum()] + d_agg['L·ª£i Su·∫•t'].tolist()
    colors = [0] + d_agg['L·ª£i Su·∫•t'].tolist()
    
    fig = go.Figure(go.Sunburst(
        labels=labels,
        parents=parents,
        values=values,
        marker=dict(
            colors=colors,
            colorscale='RdYlGn',
            cmid=0,
            showscale=True
        ),
        hovertemplate='<b>%{label}</b><br>L·ª£i Su·∫•t: %{value:.3f}%<extra></extra>'
    ))
    # ƒê√É THAY ƒê·ªîI TITLE
    fig.update_layout(title='Sunburst: Ph√¢n C·∫•p L·ª£i Su·∫•t H√†ng Ng√†y', height=600)
    return fig

def chart_wordcloud(news):
    if not news:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu tin t·ª©c")
        return None
    
    txt = ' '.join([item['ti√™u_ƒë·ªÅ'] for item in news])
    if len(txt) < 20:
        st.warning("‚ö†Ô∏è D·ªØ li·ªáu vƒÉn b·∫£n qu√° √≠t cho WordCloud")
        return None
    
    wc = WordCloud(width=1200, height=500, background_color='white', colormap='viridis', prefer_horizontal=0.7).generate(txt)
    fig, ax = plt.subplots(figsize=(12, 5))
    # ƒê√É THAY ƒê·ªîI TITLE
    ax.set_title('C√°c Ch·ªß ƒê·ªÅ N√≥ng (WordCloud)')
    ax.axis('off')
    return fig

def chart_network(d):
    d_pivot = d.pivot_table(values='ret', index='wd_vn', columns='hr', aggfunc='mean').fillna(0)
    wd_ord_vn = ['Th·ª© Hai', 'Th·ª© Ba', 'Th·ª© T∆∞', 'Th·ª© NƒÉm', 'Th·ª© S√°u', 'Th·ª© B·∫£y', 'Ch·ªß Nh·∫≠t']
    d_pivot = d_pivot.reindex([w for w in wd_ord_vn if w in d_pivot.index])
    
    fig = go.Figure(data=go.Heatmap(z=d_pivot.values, x=d_pivot.columns, y=d_pivot.index, colorscale='RdBu', zmid=0, hovertemplate='%{x}h - %{y}: %{z:.3f}%<extra></extra>'))
    # ƒê√É THAY ƒê·ªîI TITLE
    fig.update_layout(title='Heatmap: L·ª£i Su·∫•t Trung B√¨nh (Gi·ªù vs. Ng√†y)', xaxis_title='Gi·ªù Trong Ng√†y', yaxis_title='Ng√†y Trong Tu·∫ßn', height=500)
    return fig

# ==============================================================================
# H√ÄM STORYTELLING (S·∫º ƒê∆Ø·ª¢C G·ªåI ·ªû CU·ªêI)
# ==============================================================================

def render_story(d, news):
    # ƒê√É THAY ƒê·ªîI TITLE CH√çNH
    st.markdown("# üìñ B√°o C√°o T·ªïng H·ª£p & K·∫øt Lu·∫≠n C·ªßa Chuy√™n Gia")
    
    pr_chg = ((d['c'].iloc[-1] - d['c'].iloc[0]) / d['c'].iloc[0]) * 100
    avg_ret = d['ret'].mean()
    vol_avg = d['vol7'].mean()
    max_rng = d['rng'].max()
    bull_cnt = len(d[d['dir'] == 'TƒÇNG'])
    bear_cnt = len(d[d['dir'] == 'GI·∫¢M'])
    
    st.markdown(f"""
    ## üìä T√≥m T·∫Øt 
    
    **Bi·∫øn ƒê·ªông Gi√°:** Bitcoin ƒë√£ thay ƒë·ªïi **{pr_chg:+.2f}%** trong kho·∫£ng th·ªùi gian ph√¢n t√≠ch.
    
    **T√¢m L√Ω Th·ªã Tr∆∞·ªùng:** C√≥ **{bull_cnt}** gi·ªù tƒÉng so v·ªõi **{bear_cnt}** gi·ªù gi·∫£m (T·ª∑ L·ªá: {bull_cnt/(bear_cnt+1):.2f}:1).
    
    **Ph√¢n T√≠ch ƒê·ªô Bi·∫øn ƒê·ªông:** ƒê·ªô bi·∫øn ƒë·ªông trung b√¨nh 7 ng√†y ƒë·∫°t **${vol_avg:.2f}**. 
    
    **H·ªì S∆° L·ª£i Su·∫•t:** L·ª£i su·∫•t trung b√¨nh m·ªói gi·ªù **{avg_ret:+.3f}%**
    """)
    
    st.markdown("---")
    
    st.markdown("## üí° Nh·ªØng Hi·ªÉu Bi·∫øt Ch√≠nh (Insights)")
    st.markdown("""
    1. **H√†nh ƒê·ªông Gi√°:** Theo d√µi xu h∆∞·ªõng v·ªõi c√°c m·ª©c h·ªó tr·ª£/kh√°ng c·ª± r√µ r√†ng ƒë∆∞·ª£c x√°c ƒë·ªãnh qua ƒê∆∞·ªùng Trung B√¨nh ƒê·ªông
    2. **Ph√¢n B·ªë L·ª£i Su·∫•t:** Histogram cho th·∫•y ph√¢n b·ªë g·∫ßn nh∆∞ chu·∫©n nh∆∞ng c√≥ ƒëu√¥i l·ªách, ch·ªâ ra c√°c s·ª± ki·ªán c·ª±c ƒëoan √≠t x·∫£y ra
    3. **M√¥ H√¨nh Theo Ng√†y:** M·ªôt s·ªë ng√†y trong tu·∫ßn c√≥ m·ª©c bi·∫øn ƒë·ªông cao h∆°n, c√≥ th·ªÉ do tin t·ª©c ho·∫∑c ho·∫°t ƒë·ªông giao d·ªãch
    4. **M·ªëi T∆∞∆°ng Quan:** Kh·ªëi l∆∞·ª£ng th∆∞·ªùng tƒÉng trong c√°c ng√†y bi·∫øn ƒë·ªông cao, cho th·∫•y tham gia c·ªßa nh√† ƒë·∫ßu t∆∞
    5. **C∆° H·ªôi Giao D·ªãch:** B·∫£n ƒë·ªì m√¥ h√¨nh ti·∫øt l·ªô c√°c c·ª≠a s·ªï giao d·ªãch t·ªëi ∆∞u theo gi·ªù v√† ng√†y
    """)
    
    st.markdown("---")
    
    st.markdown("## üîî Tin T·ª©c Th·ªã Tr∆∞·ªùng G·∫ßn ƒê√¢y")
    st.markdown("**Tin T·ª©c Quan Tr·ªçng V·ªÅ Bitcoin:**")
    
    if news:
        for i, item in enumerate(news[:15], 1):
            st.markdown(f"**{i}.** {item['ti√™u_ƒë·ªÅ'][:100]}... *(Ngu·ªìn: {item['ngu·ªìn']})*")
    else:
        st.markdown("‚ÑπÔ∏è Kh√¥ng c√≥ tin t·ª©c quan tr·ªçng m·ªõi")
    
    st.markdown("---")
    
    # === PH·∫¶N K·∫æT LU·∫¨N CHUY√äN GIA M·ªöI ===
    st.markdown("## üéì K·∫øt Lu·∫≠n & C∆° H·ªôi Giao D·ªãch C·ªßa Chuy√™n Gia")
    
    # 1. Ph√¢n t√≠ch MA
    try:
        last_ma7 = d['ma7'].iloc[-1]
        last_ma21 = d['ma21'].iloc[-1]
        prev_ma7 = d['ma7'].iloc[-2]
        prev_ma21 = d['ma21'].iloc[-2]
        
        ma_signal = ""
        if last_ma7 > last_ma21 and prev_ma7 <= prev_ma21:
            ma_signal = f"**T√çN HI·ªÜU MUA (Bullish Crossover):** ƒê∆∞·ªùng MA7 (ng·∫Øn h·∫°n) v·ª´a c·∫Øt l√™n tr√™n MA21 (trung h·∫°n). Gi√° hi·ªán t·∫°i: **${d['c'].iloc[-1]:.2f}**."
        elif last_ma7 < last_ma21 and prev_ma7 >= prev_ma21:
            ma_signal = f"**T√çN HI·ªÜU B√ÅN (Bearish Crossover):** ƒê∆∞·ªùng MA7 (ng·∫Øn h·∫°n) v·ª´a c·∫Øt xu·ªëng d∆∞·ªõi MA21 (trung h·∫°n). Gi√° hi·ªán t·∫°i: **${d['c'].iloc[-1]:.2f}**."
        elif last_ma7 > last_ma21:
            ma_signal = f"**Xu h∆∞·ªõng TƒÇNG:** Gi√° ƒëang trong xu h∆∞·ªõng tƒÉng ng·∫Øn h·∫°n (MA7 > MA21). Ch·ªù t√≠n hi·ªáu mua khi gi√° ƒëi·ªÅu ch·ªânh v·ªÅ g·∫ßn MA7 (**~${last_ma7:.2f}**) ho·∫∑c MA21 (**~${last_ma21:.2f}**)."
        else:
            ma_signal = f"**Xu h∆∞·ªõng GI·∫¢M:** Gi√° ƒëang trong xu h∆∞·ªõng gi·∫£m ng·∫Øn h·∫°n (MA7 < MA21). Ch·ªù t√≠n hi·ªáu b√°n khi gi√° h·ªìi ph·ª•c v·ªÅ g·∫ßn MA7 (**~${last_ma7:.2f}**) ho·∫∑c MA21 (**~${last_ma21:.2f}**)."
        
        st.markdown(f"**1. Ph√¢n T√≠ch Xu H∆∞·ªõng (MA):**\n{ma_signal}")
    except Exception as e:
        st.markdown("**1. Ph√¢n T√≠ch Xu H∆∞·ªõng (MA):**\nKh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch ƒë∆∞·ªùng MA.")


    # 2. Ph√¢n t√≠ch RSI
    try:
        last_rsi = d['rsi'].iloc[-1]
        rsi_signal = ""
        if last_rsi > 70:
            rsi_signal = f"**C·∫¢NH B√ÅO QU√Å MUA (Overbought):** RSI hi·ªán t·∫°i l√† **{last_rsi:.2f}** (> 70). Th·ªã tr∆∞·ªùng ƒëang h∆∞ng ph·∫•n qu√° m·ª©c, r·ªßi ro ƒëi·ªÅu ch·ªânh gi·∫£m l√† cao. C√¢n nh·∫Øc ch·ªët l·ªùi ho·∫∑c ƒë·ª©ng ngo√†i."
        elif last_rsi < 30:
            rsi_signal = f"**C∆† H·ªòI QU√Å B√ÅN (Oversold):** RSI hi·ªán t·∫°i l√† **{last_rsi:.2f}** (< 30). Th·ªã tr∆∞·ªùng ƒëang bi quan, ƒë√¢y c√≥ th·ªÉ l√† c∆° h·ªôi MUA v√†o n·∫øu k·∫øt h·ª£p v·ªõi c√°c t√≠n hi·ªáu h·ªó tr·ª£ kh√°c."
        else:
            rsi_signal = f"**Trung t√≠nh:** ƒê·ªông l∆∞·ª£ng th·ªã tr∆∞·ªùng ƒëang ·ªü m·ª©c trung t√≠nh (RSI: **{last_rsi:.2f}**). Giao d·ªãch n√™n d·ª±a v√†o xu h∆∞·ªõng (MA) ho·∫∑c m√¥ h√¨nh gi√°."
            
        st.markdown(f"**2. Ph√¢n T√≠ch ƒê·ªông L∆∞·ª£ng (RSI):**\n{rsi_signal}")
    except Exception as e:
        st.markdown("**2. Ph√¢n T√≠ch ƒê·ªông L∆∞·ª£ng (RSI):**\nKh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch RSI.")

    # 3. Ph√¢n t√≠ch Bi·∫øn ƒë·ªông & Th·ªùi gian (T·ª´ Violin & Heatmap)
    try:
        vol_by_day = d.groupby('wd_vn')['vol7'].mean().sort_values(ascending=False)
        most_vol_day = vol_by_day.index[0]
        
        ret_by_hour = d.groupby('hr')['ret'].mean()
        best_hour = ret_by_hour.idxmax()
        worst_hour = ret_by_hour.idxmin()
        
        time_signal = f"**Ng√†y bi·∫øn ƒë·ªông nh·∫•t** (r·ªßi ro & c∆° h·ªôi cao) l√† **{most_vol_day}**. D·ª±a tr√™n d·ªØ li·ªáu 500 gi·ªù qua, **khung gi·ªù {best_hour}:00** c√≥ l·ª£i su·∫•t trung b√¨nh cao nh·∫•t, trong khi **khung gi·ªù {worst_hour}:00** c√≥ l·ª£i su·∫•t trung b√¨nh th·∫•p nh·∫•t."
        st.markdown(f"**3. Ph√¢n T√≠ch M√¥ H√¨nh (Th·ªùi Gian):**\n{time_signal}")
    except Exception as e:
        st.markdown("**3. Ph√¢n T√≠ch M√¥ H√¨nh (Th·ªùi Gian):**\nKh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch m√¥ h√¨nh th·ªùi gian.")

    
    st.markdown(f"""
    ---
    ## üéì T·ªïng K·∫øt C·ªßa Chuy√™n Gia
    
    K·∫øt h·ª£p c√°c y·∫øu t·ªë tr√™n:
    * **Xu h∆∞·ªõng ch√≠nh:** {ma_signal.split(':', 1)[-1].strip()}
    * **ƒê·ªông l∆∞·ª£ng:** {rsi_signal.split(':', 1)[-1].strip()}
    * **Th·ªùi ƒëi·ªÉm:** {time_signal.split(':', 1)[-1].strip()}
    
    **Khuy·∫øn ngh·ªã:** ƒê√¢y l√† t√†i s·∫£n bi·∫øn ƒë·ªông cao. Giao d·ªãch n√™n tu√¢n th·ªß qu·∫£n l√Ω r·ªßi ro nghi√™m ng·∫∑t.
    """)
    
    # Gi·ªØ l·∫°i c√°c metrics cu·ªëi c√πng
    st.columns(5) # T·∫°o kho·∫£ng tr·ªëng
    col1, col2, col3, col4, col5 = st.columns(5)
    with col1:
        st.metric("üí∞ Gi√° Hi·ªán T·∫°i", f"${d['c'].iloc[-1]:.2f}")
    with col2:
        st.metric("üìä Thay ƒê·ªïi (500h)", f"{pr_chg:+.2f}%")
    with col3:
        st.metric("üìà L·ª£i Su·∫•t TB/h", f"{avg_ret:+.3f}%")
    with col4:
        st.metric("üü¢ Gi·ªù TƒÉng", f"{bull_cnt}")
    with col5:
        st.metric("üìâ Bƒê TB (7h)", f"${vol_avg:.2f}")

# ==============================================================================
# H√ÄM MAIN() - ƒê√É S·∫ÆP X·∫æP L·∫†I
# ==============================================================================

def main():
    st.markdown("<h1>üìà Dashboard Ph√¢n T√≠ch Bitcoin Pro</h1>", unsafe_allow_html=True)
    st.markdown("Ph√¢n T√≠ch N√¢ng Cao | Tr·ª±c Quan H√≥a T∆∞∆°ng T√°c Th·ªùi Gian Th·ª±c | Insights Chuy√™n Nghi·ªáp")
    st.markdown("---")
    
    with st.spinner("‚è≥ ƒêang t·∫£i d·ªØ li·ªáu..."):
        df_raw = fetch_binance(sym='BTCUSDT', intv='1h', lim=500)
        news = fetch_news(key='fb371b39780a94f8a3500184fcdd2aa0326ebc66')
        
        if df_raw is None:
            st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ Binance. Vui l√≤ng th·ª≠ l·∫°i sau.")
            st.stop()
        
        df = clean_binance(df_raw)
    
    # Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë ch√≠nh (KPIs)
    col1, col2, col3, col4, col5 = st.columns(5)
    with col1:
        st.metric("üí∞ Gi√°", f"${df['c'].iloc[-1]:.2f}")
    with col2:
        st.metric("üìà Gi·ªù N√†y", f"{df['ret'].iloc[-1]:+.2f}%")
    with col3:
        st.metric("üìä TB", f"{df['ret'].mean():+.2f}%")
    with col4:
        st.metric("Bi√™n ƒê·ªô", f"${df['rng'].mean():.2f}")
    with col5:
        st.metric("RSI", f"{df['rsi'].iloc[-1]:.1f}")
    
    st.markdown("---")
    
    # === PH·∫¶N 1: PH√ÇN T√çCH BI·ªÇU ƒê·ªí CHI TI·∫æT ===
    st.markdown("## üìà Ph√¢n T√≠ch Bi·ªÉu ƒê·ªì Chi Ti·∫øt")
    
    # ƒê√É THAY ƒê·ªîI TI√äU ƒê·ªÄ INSIGHT
    st.markdown('<div class="insight"><b>üìà Ph√¢n T√≠ch Xu H∆∞·ªõng Gi√° (MA7, MA21):</b><br>Hi·ªÉn th·ªã gi√° ƒë√≥ng c·ª≠a (xanh) c√πng v·ªõi 2 ƒë∆∞·ªùng trung b√¨nh ƒë·ªông. MA7 (cam n√©t) th·ªÉ hi·ªán xu h∆∞·ªõng ng·∫Øn h·∫°n (7 gi·ªù). MA21 (ƒë·ªè ch·∫•m) th·ªÉ hi·ªán xu h∆∞·ªõng trung h·∫°n (21 gi·ªù). Khi MA7 c·∫Øt l√™n tr√™n MA21 = t√≠n hi·ªáu mua. Khi c·∫Øt xu·ªëng = t√≠n hi·ªáu b√°n. ƒê√¢y l√† chi·∫øn l∆∞·ª£c giao d·ªãch c∆° b·∫£n.</div>', unsafe_allow_html=True)
    st.plotly_chart(chart_line(df), use_container_width=True)
    
    # ƒê√É THAY ƒê·ªîI TI√äU ƒê·ªÄ INSIGHT
    st.markdown('<div class="insight"><b>üìâ Bi·ªÉu ƒê·ªì V√πng: Gi√° ƒê√≥ng C·ª≠a Theo Th·ªùi Gian:</b><br>T∆∞∆°ng t·ª± bi·ªÉu ƒë·ªì ƒë∆∞·ªùng nh∆∞ng v√πng d∆∞·ªõi ƒë∆∞·ªùng ƒë∆∞·ª£c t√¥ m√†u xanh. Tr·ª±c quan h√≥a h√†nh ƒë·ªông gi√° theo th·ªùi gian, nh·∫•t l√† ƒë·ªÉ th·∫•y r√µ m·ª©c ƒë·ªô "b·∫≠t" c·ªßa gi√°. Di·ªán t√≠ch c√†ng l·ªõn = gi√° c√†ng cao. Gi√∫p n·∫Øm b·∫Øt nhanh xu h∆∞·ªõng t·ªïng qu√°t c·ªßa gi√° trong giai ƒëo·∫°n d√†i.</div>', unsafe_allow_html=True)
    st.plotly_chart(chart_area(df), use_container_width=True)

    # Chia c·ªôt cho c√°c bi·ªÉu ƒë·ªì nh·ªè h∆°n
    c1, c2 = st.columns(2)
    with c1:
        # ƒê√É THAY ƒê·ªîI TI√äU ƒê·ªÄ INSIGHT
        st.markdown('<div class="insight"><b>üìä Ph√¢n T√≠ch T·∫ßn Su·∫•t L·ª£i Nhu·∫≠n (Histogram):</b><br>Hi·ªÉn th·ªã t·∫ßn su·∫•t xu·∫•t hi·ªán c·ªßa m·ªói m·ª©c l·ª£i su·∫•t h√†ng gi·ªù. Gi√∫p x√°c ƒë·ªãnh m√¥ h√¨nh l·ª£i su·∫•t v√† c√°c ngo·∫°i l·ªá. N·∫øu bi·ªÉu ƒë·ªì c√≥ h√¨nh chu√¥ng (ph√¢n b·ªë chu·∫©n), th√¨ th·ªã tr∆∞·ªùng ƒëang ho·∫°t ƒë·ªông theo quy lu·∫≠t. ƒê∆∞·ªùng ƒë·ªè ngang l√† gi√° tr·ªã trung b√¨nh - n·∫øu l·ªách tr√°i c√≥ nghƒ©a l·ª£i su·∫•t √¢m chi·∫øm ƒëa s·ªë, l·ªách ph·∫£i l√† l·ª£i su·∫•t d∆∞∆°ng chi·∫øm ƒëa s·ªë.</div>', unsafe_allow_html=True)
        st.plotly_chart(chart_hist(df), use_container_width=True)
    with c2:
        # ƒê√É THAY ƒê·ªîI TI√äU ƒê·ªÄ INSIGHT
        st.markdown('<div class="insight"><b>üì¶ Ph·∫°m Vi Bi·∫øn ƒê·ªông Gi√° (Boxplot):</b><br>So s√°nh ph·∫°m vi dao ƒë·ªông (Cao - Th·∫•p) gi·ªØa c√°c ng√†y tƒÉng/gi·∫£m/ƒëi ngang. H·ªôp c√†ng to = bi√™n ƒë·ªô c√†ng l·ªõn = b·∫•t ·ªïn ƒë·ªãnh. ƒê∆∞·ªùng trong h·ªôp = trung v·ªã (50% d·ªØ li·ªáu). C√°c ch·∫•m ngo√†i = ngo·∫°i l·ªá. Gi√∫p nh·∫≠n bi·∫øt khi n√†o th·ªã tr∆∞·ªùng "s√¥i ƒë·ªông" ho·∫∑c "y√™n tƒ©nh".</div>', unsafe_allow_html=True)
        st.plotly_chart(chart_box(df), use_container_width=True)

    # ƒê√É THAY ƒê·ªîI TI√äU ƒê·ªÄ INSIGHT
    st.markdown('<div class="insight"><b>üéª Ph√¢n Ph·ªëi Bi·∫øn ƒê·ªông (Violin) theo Ng√†y:</b><br>Hi·ªÉn th·ªã ph√¢n b·ªë ƒë·ªô bi·∫øn ƒë·ªông (volatility) cho m·ªói ng√†y trong tu·∫ßn. H√¨nh b·∫ßu d·ª•c r·ªông = bi·∫øn ƒë·ªông cao v√† kh√¥ng ·ªïn ƒë·ªãnh. H√¨nh h·∫πp = bi·∫øn ƒë·ªông th·∫•p v√† ·ªïn ƒë·ªãnh. C√≥ th·ªÉ ph√°t hi·ªán ng√†y n√†o trong tu·∫ßn giao d·ªãch "n√≥ng" nh·∫•t. V√≠ d·ª•: Th·ª© S√°u c√≥ th·ªÉ bi·∫øn ƒë·ªông h∆°n Th·ª© Hai.</div>', unsafe_allow_html=True)
    st.plotly_chart(chart_violin(df), use_container_width=True)
    
    # ƒê√É THAY ƒê·ªîI TI√äU ƒê·ªÄ INSIGHT
    st.markdown('<div class="insight"><b>üîµ H·ªìi Quy Tuy·∫øn T√≠nh: Xu H∆∞·ªõng L·ª£i Su·∫•t:</b><br>M·ªói ch·∫•m xanh = l·ª£i su·∫•t 1 gi·ªù. ƒê∆∞·ªùng ƒë·ªè = ƒë∆∞·ªùng h·ªìi quy tuy·∫øn t√≠nh th·ªÉ hi·ªán xu h∆∞·ªõng t·ªïng th·ªÉ c·ªßa l·ª£i su·∫•t. N·∫øu ƒë∆∞·ªùng ƒë·ªè ƒëi l√™n = l·ª£i su·∫•t c√≥ xu h∆∞·ªõng tƒÉng. N·∫øu ƒëi xu·ªëng = xu h∆∞·ªõng gi·∫£m. ƒê·ªô d·ªëc c·ªßa ƒë∆∞·ªùng = t·ªëc ƒë·ªô thay ƒë·ªïi. Gi√∫p x√°c ƒë·ªãnh momentum th·ªã tr∆∞·ªùng.</div>', unsafe_allow_html=True)
    st.plotly_chart(chart_scatter(df), use_container_width=True)
    
    # ƒê√É THAY ƒê·ªîI TI√äU ƒê·ªÄ INSIGHT
    st.markdown('<div class="insight"><b>üî• B·∫£n ƒê·ªì Nhi·ªát: T∆∞∆°ng Quan D·ªØ Li·ªáu:</b><br>Hi·ªÉn th·ªã m·ªëi quan h·ªá gi·ªØa c√°c bi·∫øn (gi√°, kh·ªëi l∆∞·ª£ng, bi·∫øn ƒë·ªông, RSI). M√†u xanh = t∆∞∆°ng quan d∆∞∆°ng (c√πng tƒÉng gi·∫£m). M√†u ƒë·ªè = t∆∞∆°ng quan √¢m (ng∆∞·ª£c nhau). C√†ng ƒë·∫≠m = t∆∞∆°ng quan c√†ng m·∫°nh. V√≠ d·ª•: N·∫øu kh·ªëi l∆∞·ª£ng & bi·∫øn ƒë·ªông l√† xanh ƒë·∫≠m = khi kh·ªëi l∆∞·ª£ng l·ªõn th√¨ bi·∫øn ƒë·ªông c≈©ng l·ªõn.</div>', unsafe_allow_html=True)
    st.plotly_chart(chart_heatmap(df), use_container_width=True)
    
    # ƒê√É THAY ƒê·ªîI TI√äU ƒê·ªÄ INSIGHT
    st.markdown('<div class="insight"><b>üå≥ Treemap: L·ª£i Su·∫•t R√≤ng H√†ng Ng√†y:</b><br>M·ªói h√¨nh ch·ªØ nh·∫≠t = 1 ng√†y. K√≠ch th∆∞·ªõc h√¨nh = l·ª£i su·∫•t tuy·ªát ƒë·ªëi (c√†ng to = dao ƒë·ªông c√†ng l·ªõn). M√†u xanh = ng√†y tƒÉng (l·ª£i su·∫•t d∆∞∆°ng). M√†u ƒë·ªè = ng√†y gi·∫£m (l·ª£i su·∫•t √¢m). Xem nhanh ng√†y n√†o "s√¥i ƒë·ªông" nh·∫•t v√† ng√†y n√†o l·ª£i su·∫•t t·ªët nh·∫•t. ƒêi·ªÅu n√†y gi√∫p ph√°t hi·ªán m√¥ h√¨nh giao d·ªãch theo ng√†y.</div>', unsafe_allow_html=True)
    fig_tree = chart_treemap(df)
    if fig_tree:
        st.plotly_chart(fig_tree, use_container_width=True)
        
    # ƒê√É THAY ƒê·ªîI TI√äU ƒê·ªÄ INSIGHT
    st.markdown('<div class="insight"><b>‚òÄÔ∏è Sunburst: Ph√¢n C·∫•p L·ª£i Su·∫•t H√†ng Ng√†y:</b><br>Hi·ªÉn th·ªã l·ª£i su·∫•t ph√¢n c·∫•p theo Th√°ng ‚Üí Tu·∫ßn. V√≤ng gi·ªØa = th√°ng, v√≤ng ngo√†i = tu·∫ßn. K√≠ch th∆∞·ªõc cung = l·ª£i su·∫•t tuy·ªát ƒë·ªëi. M√†u = t√≠ch c·ª±c/ti√™u c·ª±c. Click v√†o cung ƒë·ªÉ zoom v√†o chi ti·∫øt. Gi√∫p x√°c ƒë·ªãnh th√°ng & tu·∫ßn n√†o ho·∫°t ƒë·ªông t·ªët nh·∫•t. Ph√°t hi·ªán m√¥ h√¨nh theo th·ªùi gian l·ªõn.</div>', unsafe_allow_html=True)
    fig_sun = chart_sunburst(df)
    if fig_sun:
        st.plotly_chart(fig_sun, use_container_width=True)
        
    # ƒê√É THAY ƒê·ªîI TI√äU ƒê·ªÄ INSIGHT
    st.markdown('<div class="insight"><b>üí¨ C√°c Ch·ªß ƒê·ªÅ N√≥ng (WordCloud):</b><br>D·ªØ li·ªáu t·ª´ CryptoPanic API (tin t·ª©c ti·ªÅn ƒëi·ªán t·ª≠). T·ª´ c√†ng to = xu·∫•t hi·ªán trong tin t·ª©c c√†ng nhi·ªÅu. Gi√∫p x√°c ƒë·ªãnh ch·ªß ƒë·ªÅ ƒëang b·ªã nh√† ƒë·∫ßu t∆∞ ch√∫ √Ω. V√≠ d·ª•: N·∫øu "ETF" to = c√≥ tin ETF Bitcoin, c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn gi√°. H·ªØu √≠ch ƒë·ªÉ hi·ªÉu "t√¢m l√Ω th·ªã tr∆∞·ªùng" l√∫c n√†y.</div>', unsafe_allow_html=True)
    fig_wc = chart_wordcloud(news)
    if fig_wc:
        st.pyplot(fig_wc, use_container_width=True)
        
    # ƒê√É THAY ƒê·ªîI TI√äU ƒê·ªÄ INSIGHT
    st.markdown('<div class="insight"><b>üï∏Ô∏è Heatmap: L·ª£i Su·∫•t Trung B√¨nh (Gi·ªù vs. Ng√†y):</b><br>Ma tr·∫≠n v·ªõi h√†ng = ng√†y trong tu·∫ßn, c·ªôt = gi·ªù trong ng√†y. M·ªói √¥ = l·ª£i su·∫•t trung b√¨nh. Xanh ƒë·∫≠m = gi·ªù/ng√†y giao d·ªãch l·ª£i su·∫•t cao. ƒê·ªè ƒë·∫≠m = gi·ªù/ng√†y l·ª£i su·∫•t th·∫•p. Gi√∫p "nh√† giao d·ªãch nh·∫°y c·∫£m th·ªùi gian" t√¨m gi·ªù v√†ng ƒë·ªÉ giao d·ªãch. V√≠ d·ª•: C√≥ th·ªÉ th·∫•y Th·ª© S√°u 14h lu√¥n "s√¥i ƒë·ªông".</div>', unsafe_allow_html=True)
    st.plotly_chart(chart_network(df), use_container_width=True)
    
    st.markdown("---")
    
    # === PH·∫¶N 2: STORYTELLING & K·∫æT LU·∫¨N (ƒê√É CHUY·ªÇN XU·ªêNG CU·ªêI) ===
    # G·ªçi h√†m render_story tr·ª±c ti·∫øp
    render_story(df, news)
    
    st.markdown("---")
    st.markdown(f"*üìÖ C·∫≠p Nh·∫≠t: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | üìä D·ªØ Li·ªáu: 500 n·∫øn 1 gi·ªù t·ª´ Binance | üîî Tin T·ª©c: CryptoPanic API*")

if __name__ == "__main__":
    main()